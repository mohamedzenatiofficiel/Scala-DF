[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\zmoha\AppData\Local\Temp\idea11.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\zmoha\AppData\Local\Temp\idea11.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 11.0.12)
[debug]       Load.loadUnit: plugins took 144.2114ms
[debug]       Load.loadUnit: defsScala took 0.3886ms
[debug] [Loading] Scanning directory C:\Users\zmoha\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zmoha\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.5362 ms
[debug]           Load.resolveProject(global-plugins) took 71.0316ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\zmoha\.sbt\1.0\plugins, plugins: List(<none>))) took 130.7088ms
[debug] [Loading] Done in C:\Users\zmoha\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 160.9378ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3203ms
[debug]     Load.loadUnit(file:/C:/Users/zmoha/.sbt/1.0/plugins/, ...) took 317.9301ms
[debug]   Load.apply: load took 588.2314ms
[debug]   Load.apply: resolveProjects took 10.8269ms
[debug]   Load.apply: finalTransforms took 97.2203ms
[debug]   Load.apply: config.delegates took 11.4498ms
[debug]   Load.apply: Def.make(settings)... took 568.4232ms
[debug]   Load.apply: structureIndex took 191.8331ms
[debug]   Load.apply: mkStreams took 2.2107ms
[info] loading global plugins from C:\Users\zmoha\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3880.4124ms
[debug]           Load.loadUnit: plugins took 28.6458ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\zmoha\OneDrive\Documents\spark-df\project
[debug]             Load.loadUnit: mkEval took 6.6143ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zmoha\OneDrive\Documents\spark-df\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.4042 ms
[info] loading settings for project spark-df-build from idea11.sbt ...
[debug]               Load.resolveProject(spark-df-build) took 3.781ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-df-build, base: C:\Users\zmoha\OneDrive\Documents\spark-df\project, plugins: List(<none>))) took 6.8795ms
[debug] [Loading] Done in C:\Users\zmoha\OneDrive\Documents\spark-df\project, returning: (spark-df-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 147.7476ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.426ms
[debug]         Load.loadUnit(file:/C:/Users/zmoha/OneDrive/Documents/spark-df/project/, ...) took 183.0014ms
[debug]       Load.apply: load took 184.7539ms
[debug]       Load.apply: resolveProjects took 0.1914ms
[debug]       Load.apply: finalTransforms took 8.0636ms
[debug]       Load.apply: config.delegates took 0.3513ms
[debug]       Load.apply: Def.make(settings)... took 87.9938ms
[debug]       Load.apply: structureIndex took 25.2462ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from C:\Users\zmoha\OneDrive\Documents\spark-df\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 648.574ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\zmoha\OneDrive\Documents\spark-df
[debug]       Load.loadUnit: mkEval took 0.3876ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zmoha\OneDrive\Documents\spark-df, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.1499 ms
[info] loading settings for project spark-df from build.sbt ...
[debug]         Load.resolveProject(spark-df) took 41.6293ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-df, base: C:\Users\zmoha\OneDrive\Documents\spark-df, plugins: List(<none>))) took 47.9082ms
[debug] [Loading] Done in C:\Users\zmoha\OneDrive\Documents\spark-df, returning: (spark-df)
[debug]     Load.loadUnit: loadedProjectsRaw took 157.1581ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.5085ms
[debug]   Load.loadUnit(file:/C:/Users/zmoha/OneDrive/Documents/spark-df/, ...) took 820.2781ms
[debug] Load.apply: load took 822.3042ms
[debug] Load.apply: resolveProjects took 0.2069ms
[debug] Load.apply: finalTransforms took 42.8697ms
[debug] Load.apply: config.delegates took 0.3691ms
[debug] Load.apply: Def.make(settings)... took 108.8526ms
[debug] Load.apply: structureIndex took 23.2793ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to Spark Dataframe 1 (in build file:/C:/Users/zmoha/OneDrive/Documents/spark-df/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63304 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63304, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Spark Dataframe 1 (in build file:/C:/Users/zmoha/OneDrive/Documents/spark-df/)
[debug] > Exec(idea-shell, None, None)
